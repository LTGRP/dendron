#!/usr/bin/env python2

import errno
import json
import os.path
import re
import shutil
import sys

if len(sys.argv) < 2 or len(sys.argv) > 3:
    sys.stderr.write("usage: %s /path/to/matrix-doc [outfile]\n" % (sys.argv[0],))
    sys.exit(1)

if len(sys.argv) > 2:
    outfile = sys.argv[2]
else:
    outfile = os.path.abspath(os.path.join(os.path.dirname(os.path.dirname(__file__)), "src/github.com/matrix-org/dendron/proxy/paths.go"))

templating_dir = os.path.join(os.path.abspath(sys.argv[1]), "templating")
sys.path.insert(0, templating_dir)
os.chdir(templating_dir)

from matrix_templates.units import resolve_references, MatrixUnits

apis = MatrixUnits().load_swagger_apis()

v2_paths = ["/account", "/register", "/rooms/{roomId}/receipt", "/sync", "/tokenrefresh", "/user"]

media_path_prefixes = ["/download", "/thumbnail", "/upload"]

raw = set()
redacted = set()

for file, contents in apis.items():
    for path, methods in contents["paths"].items():
        for method, spec in methods.items():
            r0_path = "/_matrix/client/r0" + path
            v_path = "/_matrix/client/api/v1" + path

            for media_path_prefix in media_path_prefixes:
                if path.startswith(media_path_prefix):
                    r0_path = "/_matrix/media/r0" + path
                    v_path = "/_matrix/media/api/v1" + path
            for v2_path in v2_paths:
                if path.startswith(v2_path):
                    v_path = "/_matrix/client/v2_alpha" + path
            if '{' not in path:
                raw.add(r0_path)
                raw.add(v_path)
            else:
                redacted.add(re.sub("{[^}]*}", "[^/]*", r0_path))
                redacted.add(re.sub("{[^}]*}", "[^/]*", v_path))

with open(outfile, "w") as f:
    f.write( """package proxy

// Note that this file was generated by `gb generate`.
// It should not be edited by hand.

//go:generate python ../../../../../scripts/generate_proxy_paths.py ../../../../../vendor/src/github.com/matrix-org/matrix-doc

import "regexp"

var unknownPath = "unknown path"

type regexpAndString struct {
	re *regexp.Regexp
	s  string
}

var (
	constantPaths = make(map[string]bool)
	regexpPaths   []regexpAndString
)

func endpointFor(path string) string {
	if ok := constantPaths[path]; ok {
		return path
	}
	for _, i := range regexpPaths {
		if i.re.MatchString(path) {
			return i.s
		}
	}
	return unknownPath
}

func init() {
""")

    f.write('\n'.join('\tconstantPaths[`%s`] = true' % (p,) for p in sorted(raw)))
    f.write("\n\n")
    f.write('\n'.join('\tregexpPaths = append(regexpPaths, regexpAndString{regexp.MustCompile(`^%s$`), `%s`})' % (p, p.replace("[^/]*", "_")) for p in sorted(redacted)))
    f.write("\n}\n")
